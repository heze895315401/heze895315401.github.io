<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白日梦想家</title>
  
  <subtitle>晴天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-17T17:35:31.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小盒子</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用hexo搭建个人github主页</title>
    <link href="http://yoursite.com/2018/04/18/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAgithub%E4%B8%BB%E9%A1%B5/"/>
    <id>http://yoursite.com/2018/04/18/使用hexo搭建个人github主页/</id>
    <published>2018-04-17T16:10:22.000Z</published>
    <updated>2018-04-17T17:35:31.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><h5 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h5><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>做为一个程序员，为了让自己逼格高一点点！还是有必要给自己搭建一个博客个人主页！本篇博客就是利用hexo手把手将你变得精致一点！（有自己的githup主页面试是可以加分的哦~）</p><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>本篇教程是基于Mac os环境下完成的</p><h4 id="第一步环境配置"><a href="#第一步环境配置" class="headerlink" title="第一步环境配置"></a>第一步环境配置</h4><blockquote><blockquote><p>安装Node （自己去官网下去，傻瓜式安装）</p></blockquote></blockquote><blockquote><blockquote><p>安装Git</p></blockquote></blockquote><blockquote><blockquote><p>GitHub账号</p></blockquote></blockquote><p>上述工具的安装和使用我不是本教程的重点，如果你对于它们都很陌生，那本教程就不大适合于你了🙁</p><h4 id="正式安装Hexo"><a href="#正式安装Hexo" class="headerlink" title="正式安装Hexo"></a>正式安装Hexo</h4><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><blockquote><blockquote><p>$ npm install -g hexo-cli</p></blockquote></blockquote><h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><blockquote><blockquote><p>hexo init <folder> （folder名称随意，你怎么高兴怎么取~）<br>cd <folder> （cd到folder目录）<br>npm install</folder></folder></p></blockquote></blockquote><h4 id="新建完成后，指定文件夹的目录如下："><a href="#新建完成后，指定文件夹的目录如下：" class="headerlink" title="新建完成后，指定文件夹的目录如下："></a>新建完成后，指定文件夹的目录如下：</h4><p><img src="/img/Hexo/Hexoscreenshots.png" alt="示例"></p><p>目录名或文件名                   作用<br>source            用于存放你所生成各种原始资源，你如你的帖子<br>themes                  存放你的站点主题及主题配置文件<br>config.yml        站点配置文件，部署，安装插件，修改样式时会用</p><h4 id="安装Hexo依赖"><a href="#安装Hexo依赖" class="headerlink" title="安装Hexo依赖"></a>安装Hexo依赖</h4><blockquote><blockquote><p>cd <folder><br>npm install</folder></p></blockquote></blockquote><h4 id="本地调式"><a href="#本地调式" class="headerlink" title="本地调式"></a>本地调式</h4><blockquote><blockquote><p>hexo s –debug</p></blockquote></blockquote><p><img src="/img/Hexo/hexoshili.png" alt="成功"></p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法 然后建立关联，我的Blog在本地/Users/heze/blog，blog是我之前建的站点</p><p>安装hexo与github相关联的package</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改站点配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure></p><p>在最下面，格式如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:zezeyu/zezeyu.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>这里我用到了SSH Keys，直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。</p><p>然后生成静态页面</p><blockquote><blockquote><p>hexo generate</p></blockquote></blockquote><p>如果有报错发生，执行下列操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-ejs --save</span><br><span class="line">npm install hexo-renderer-stylus --save</span><br><span class="line">npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure></p><p>发布到你的github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>现在你就可以在浏览器访问你的地址了！ 例如我的：<a href="https://zezeyu.github.io" target="_blank" rel="noopener">https://zezeyu.github.io</a></p><h4 id="常用命令总结"><a href="#常用命令总结" class="headerlink" title="常用命令总结"></a>常用命令总结</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br><span class="line">hexo help  #查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure><p>最后要提到的就是主题！我现在用的主题是next，简洁方便！强行安利一波！</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>1.本篇博客参考了好朋友的博客！你们可以看看他的教程！大佬的传送门:<a href="https://deimo.github.io" target="_blank" rel="noopener">https://deimo.github.io</a><br>2.当然还有hexo官方文档:<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;h5 id=&quot;什么是Hexo？&quot;&gt;&lt;a href=&quot;#什么是Hexo？&quot; class=&quot;headerlink&quot; title=&quot;什么是Hexo？&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mac下安装virtualenv，以及安装virtualenvwrapper出错解决方案</title>
    <link href="http://yoursite.com/2018/04/17/mac%E4%B8%8B%E5%AE%89%E8%A3%85virtualenv%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85virtualenvwrapper%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2018/04/17/mac下安装virtualenv，以及安装virtualenvwrapper出错解决方案/</id>
    <published>2018-04-17T15:39:18.000Z</published>
    <updated>2018-04-17T15:52:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>virtualenv是Django很好的工具，能帮助我们管理虚拟环境。下面是在mac下如何安装使用</p><h4 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install virtualenv</span><br></pre></td></tr></table></figure><p>安装完成过后发现virtualenv用起来不是那么的方便，操作起来挺复杂的。</p><p>virtualenvwrapper 使得virtualenv变得更好用，所以我们一起安装了。</p><h4 id="安装virtualenvwrapper"><a href="#安装virtualenvwrapper" class="headerlink" title="安装virtualenvwrapper"></a>安装virtualenvwrapper</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install virtualenvwrapper</span><br></pre></td></tr></table></figure><p>结果问题就来了，报错了，提示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Exception:</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/basecommand.py"</span>, line 215, <span class="keyword">in</span> main</span><br><span class="line">    status = self.run(options, args)</span><br><span class="line">  File <span class="string">"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/commands/install.py"</span>, line 342, <span class="keyword">in</span> run</span><br><span class="line">    prefix=options.prefix_path,</span><br><span class="line">  File <span class="string">"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/req/req_set.py"</span>, line 778, <span class="keyword">in</span> install</span><br><span class="line">    requirement.uninstall(auto_confirm=True)</span><br><span class="line">  File <span class="string">"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/req/req_install.py"</span>, line 754, <span class="keyword">in</span> uninstall</span><br><span class="line">    paths_to_remove.remove(auto_confirm)</span><br><span class="line">  File <span class="string">"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/req/req_uninstall.py"</span>, line 115, <span class="keyword">in</span> remove</span><br><span class="line">    renames(path, new_path)</span><br><span class="line">  File <span class="string">"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/utils/__init__.py"</span>, line 267, <span class="keyword">in</span> renames</span><br><span class="line">    shutil.move(old, new)</span><br><span class="line">  File <span class="string">"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py"</span>, line 302, <span class="keyword">in</span> move</span><br><span class="line">    copy2(src, real_dst)</span><br><span class="line">  File <span class="string">"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py"</span>, line 131, <span class="keyword">in</span> copy2</span><br><span class="line">    copystat(src, dst)</span><br><span class="line">  File <span class="string">"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py"</span>, line 103, <span class="keyword">in</span> copystat</span><br><span class="line">    os.chflags(dst, st.st_flags)</span><br><span class="line">OSError: [Errno 1] Operation not permitted: <span class="string">'/tmp/pip-wUnCGE-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/six-1.4.1-py2.7.egg-info'</span></span><br></pre></td></tr></table></figure><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>原因是因为six的版本过低，所以在原来的安装命令下添加 ‘–ignore-install six’ 参数，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install virtualenvwrapper -v --ignore-install six</span><br></pre></td></tr></table></figure><p>最后检查six的版本，发现已更新到最新版本，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip show six</span><br></pre></td></tr></table></figure><p>得到输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Name: six</span><br><span class="line">Version: 1.11.0</span><br><span class="line">Summary: Python 2 and 3 compatibility utilities</span><br><span class="line">Home-page: http://pypi.python.org/pypi/six/</span><br><span class="line">Author: Benjamin Peterson</span><br><span class="line">Author-email: benjamin@python.org</span><br><span class="line">License: MIT</span><br><span class="line">Location: /Library/Python/2.7/site-packages</span><br><span class="line">Requires:</span><br></pre></td></tr></table></figure></p><p>以上就是我遇到的坑，希望能帮到大家！谢谢观看！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;virtualenv是Django很好的工具，能帮助我们管理虚拟环境。下面是在mac下如何安装使用&lt;/p&gt;
&lt;h4 id=&quot;安装virtualenv&quot;&gt;&lt;a href=&quot;#安装virtualenv&quot; class=&quot;headerlink&quot; title=&quot;安装virtualen
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>贝塞尔曲线绘制时刻速度表(iOS)</title>
    <link href="http://yoursite.com/2018/04/07/%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E7%BB%98%E5%88%B6%E6%97%B6%E5%88%BB%E9%80%9F%E5%BA%A6%E8%A1%A8-iOS/"/>
    <id>http://yoursite.com/2018/04/07/贝塞尔曲线绘制时刻速度表-iOS/</id>
    <published>2018-04-07T13:04:52.000Z</published>
    <updated>2018-04-07T14:35:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近新入职了一家公司！ 接手了一个新的app！ 尼玛！因为项目以前是外包的!!!  巨多坑！！！  各种BUG！！！ 心里就两个想法，要么走，要么重构！！！ （那当然是老老实实重构咯  哈哈  混口饭吃不容易）！！！</p><p>前两天产品经理提了个需求！是以前外包没做出来的！如下图:<br><img src="/img/iOS/demo.png" alt="示例"></p><p>好吧！并不难是吧！<br>这个需求有多种实现方法！这篇博客我先用最容易理解的方式写个demo</p><p>首先看到这个图立马想到的逻辑是那几点：<br>对头，就是！<br>画线！画线！画线！<br>画不同颜色的线！！！<br>每条线的起点和终点要对应！！！</p><p>我们现在实现第一部！<br>画其中一天效果：<br>这个逻辑很简单！首先一天等于1440分钟，那么我们就把一条view分成1440等分！每天能有四种不同的状态：小于40km/h（蓝色） 40-90km/h（绿色） 大于90km/h（红色） 静止（灰色）<br>我们可以直接将view设置成灰色，那么我们就只剩下三种颜色处理！<br>在用贝塞尔曲线画出对应的点线（和没分钟想对应，例如今天的0点到2点速度超过了90km/h）如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">UIColor *color = [UIColor colorWithRed:254/255.0 green:40/255.0 blue:69/255.0 alpha:1];</span><br><span class="line">[color <span class="built_in">set</span>];</span><br><span class="line"><span class="built_in">float</span> X1= 0 /4.8 ; //这里为什么除以4.8  自己想哈</span><br><span class="line"><span class="built_in">float</span> X2= 120 /4.8;</span><br><span class="line">UIBezierPath* path = [UIBezierPath bezierPath];</span><br><span class="line">[path moveToPoint:CGPointMake(X1, self.bounds.size.height/2)];</span><br><span class="line">[path addLineToPoint:CGPointMake(X2, self.bounds.size.height/2)];</span><br><span class="line">path.lineWidth = self.bounds.size.height;</span><br><span class="line">[path stroke];</span><br></pre></td></tr></table></figure><p>以此类推！是不是超级简单！！！<br>不就是你几点到几点是什么速度，我对应着贝塞尔曲线画一个对应的点就行了呗！！！在换个颜色就OK了</p><p>另外要提一点是！ 贝塞尔曲线是在drawRect方法绘制的！ 视图第一次调drawRect方法的时候，你的model数据还没赋值！所以要到model赋值的后调一下setNeedsDisplay，让drawRect重调一次!</p><p>最后还可以加一个简单的动画什么的！！！ 最后效果大概是这样的:<br><img src="/img/iOS/demo.gif" alt="动图"></p><p>以上的方法是用多段内塞尔曲线绘制相对应的方法！是个便于大家理解的方法！！！ 过两天会更新一个用一条贝塞尔曲线绘制不同的颜色渐变效果，加上一个核心动画！ 逼格和难度会稍稍加高点！</p><p>demo地址：<a href="https://github.com/zezeyu/travelRange-demo" target="_blank" rel="noopener">https://github.com/zezeyu/travelRange-demo</a></p><p>谢谢观看！！！</p><p>结尾: 如果你喜欢的这篇文章，扫描以下二维码，加我微信，给我小额赞赏  哈哈<br><img src="/img/iOS/WechatIMG15.jpeg" alt="微信"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近新入职了一家公司！ 接手了一个新的app！ 尼玛！因为项目以前是外包的!!!  巨多坑！！！  各种BUG！！！ 心里就两个想法，要么走，要么重构！！！ （那当然是老老实实重构咯  哈哈  混口饭吃不容易）！！！&lt;/p&gt;
&lt;p&gt;前两天产品经理提了个需求！是以前外包没做出
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用runtime监听所有页面的UITextField (iOS）</title>
    <link href="http://yoursite.com/2018/03/04/%E5%88%A9%E7%94%A8runtime%E7%9B%91%E5%90%AC%E6%89%80%E6%9C%89%E9%A1%B5%E9%9D%A2%E7%9A%84UITextField-iOS%EF%BC%89/"/>
    <id>http://yoursite.com/2018/03/04/利用runtime监听所有页面的UITextField-iOS）/</id>
    <published>2018-03-04T07:24:42.000Z</published>
    <updated>2018-04-07T14:49:03.000Z</updated>
    
    <content type="html"><![CDATA[<p> 在开发iOS的过程中，我们都会遇到许多有UITextField的页面，有的页面还不只一个。当我们提交填写的表单时，都会判断，是不是每个输入框都填写完成。效果如下：</p><p><img src="/img/iOS/20180303003453784.gif" alt="示例"></p><p>如上图，当页面输入框都输入完毕后，才能做下一步操作！但是要每个输入框页面都做判断的话，很麻烦!</p><p>所以我们可以利用runtime，提前在BaseViewController里面做好所有判断操作，让有输入框的界面继承Base,通过runtime父类遍历出子类的成员，拿到子类页面所有输入框！这样省了很多事了！</p><p>具体代码如下：</p><p>BaseViewController.h </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import &lt;UIKit/UIKit.h&gt;</span></span><br><span class="line"><span class="comment">#import "UIButton+toos.h"</span></span><br><span class="line">@interface BaseViewController : UIViewController</span><br><span class="line">//告诉子类是否所有输入框是否填写完毕的block</span><br><span class="line">@property(nonatomic,copy)void(^isOKBlock)(BOOL isOk);</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>BaseViewController.m</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import "BaseViewController.h"</span></span><br><span class="line">//首先导入runtime库</span><br><span class="line"><span class="comment">#import &lt;objc/runtime.h&gt;</span></span><br><span class="line">@interface BaseViewController ()&lt;UITextFieldDelegate,UITextViewDelegate&gt;</span><br><span class="line">&#123;</span><br><span class="line">    BOOL isOK;//用来判断是否所有输入框都输入完毕</span><br><span class="line">&#125;</span><br><span class="line">@property(nonatomic,strong)NSMutableDictionary * dic;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation BaseViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    //刚进来，肯定没输入！所以为NO</span><br><span class="line">    isOK =NO;</span><br><span class="line">    </span><br><span class="line">    self.dic = [NSMutableDictionary dictionary];</span><br><span class="line">    </span><br><span class="line">    //因为我们这里是父类，父类调用子类只能通过runtime做到！ 下面利用runtime遍历子类的成员变量</span><br><span class="line">    unsigned int outCount = 0;</span><br><span class="line">    Ivar * ivars = class_copyIvarList([self class], &amp;outCount);</span><br><span class="line">    <span class="keyword">for</span> (unsigned int i = 0; i &lt; outCount; i ++) &#123;</span><br><span class="line">        Ivar ivar = ivars[i];</span><br><span class="line">        const char * name = ivar_getName(ivar);//获取成员变量名字</span><br><span class="line">        const char * <span class="built_in">type</span> = ivar_getTypeEncoding(ivar);//获取成员的原型</span><br><span class="line">        <span class="keyword">if</span> (strcmp(<span class="built_in">type</span>, <span class="string">"@\"UITextField\""</span>) == 0)//如果<span class="built_in">type</span>是UITextField就进入方法</span><br><span class="line">        &#123;</span><br><span class="line">            NSString * s = [NSString stringWithFormat:@<span class="string">"%s"</span>,name];//UITextField的名称</span><br><span class="line">            UITextField * field = [(UITextField * )self valueForKey:s];//获取UITextField</span><br><span class="line">            field.delegate = self;//签代理</span><br><span class="line">            //监听UITextField改变的方法</span><br><span class="line">      [field addTarget:self action:@selector(textFieldWithText:) forControlEvents:UIControlEventEditingChanged];</span><br><span class="line">            //下面这行是利用字典记录UITextField的个数，以及内容</span><br><span class="line">            [self.dic setValue:@<span class="string">""</span> forKeyPath:[NSString stringWithFormat:@<span class="string">"%d"</span>,i+100]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (strcmp(<span class="built_in">type</span>, <span class="string">"@\"UITextView\""</span>) == 0) &#123;</span><br><span class="line">            NSString * s = [NSString stringWithFormat:@<span class="string">"%s"</span>,name];</span><br><span class="line">            UITextView * field = [(UITextField * )self valueForKey:s];</span><br><span class="line">            field.delegate = self;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(ivars);</span><br><span class="line">    </span><br><span class="line">    // Do any additional setup after loading the view.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)textFieldWithText:(UITextField *)textField</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int outCount = 0;</span><br><span class="line">    Ivar * ivars = class_copyIvarList([self class], &amp;outCount);</span><br><span class="line">    <span class="keyword">for</span> (unsigned int i = 0; i &lt; outCount; i ++) &#123;</span><br><span class="line">        Ivar ivar = ivars[i];</span><br><span class="line">        const char * name = ivar_getName(ivar);</span><br><span class="line">        const char * <span class="built_in">type</span> = ivar_getTypeEncoding(ivar);</span><br><span class="line">        <span class="keyword">if</span> (strcmp(<span class="built_in">type</span>, <span class="string">"@\"UITextField\""</span>) == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            NSString * s = [NSString stringWithFormat:@<span class="string">"%s"</span>,name];</span><br><span class="line">            UITextField * field = [(UITextField * )self valueForKey:s];</span><br><span class="line">            //每个输入框的改变，字典的value都会一起改变。</span><br><span class="line">            [self.dic setValue:field.text forKeyPath:[NSString stringWithFormat:@<span class="string">"%d"</span>,i+100]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(ivars);</span><br><span class="line">    isOK = YES;//这里的意思是，输入后，先给你个YES 然后走下面的代码</span><br><span class="line">    <span class="keyword">for</span> (NSString * string <span class="keyword">in</span> [self.dic allValues]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (string.length&lt;1) &#123;//只要发现输入后有输入框的值为空就为NO</span><br><span class="line">            isOK =NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//下面就是返回结果给子类</span><br><span class="line">    <span class="keyword">if</span> (self.isOKBlock) &#123;</span><br><span class="line">        self.isOKBlock(isOK);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(BOOL)textFieldShouldReturn:(UITextField *)textField&#123;</span><br><span class="line">    [textField resignFirstResponder];</span><br><span class="line">    <span class="built_in">return</span> YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)viewWillDisappear:(BOOL)animated&#123;</span><br><span class="line">    [super viewWillDisappear:animated];</span><br><span class="line">    [[[UIApplication sharedApplication] keyWindow] endEditing:YES];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)didReceiveMemoryWarning &#123;</span><br><span class="line">    [super didReceiveMemoryWarning];</span><br><span class="line">    // Dispose of any resources that can be recreated.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"><span class="comment">#pragma mark - Navigation</span></span><br><span class="line"></span><br><span class="line">// In a storyboard-based application, you will often want to <span class="keyword">do</span> a little preparation before navigation</span><br><span class="line">- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender &#123;</span><br><span class="line">    // Get the new view controller using [segue destinationViewController].</span><br><span class="line">    // Pass the selected object to the new view controller.</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>在子类中调用父类的block就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[_button setNotOptionalBut];</span><br><span class="line">    __weak typeof(self)weakself = self;</span><br><span class="line">    self.isOKBlock = ^(BOOL isOK)&#123;</span><br><span class="line">        <span class="keyword">if</span> (isOK) &#123;//输入完毕</span><br><span class="line">            [weakself.button setOptionalBut];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;//没输入完</span><br><span class="line">            [weakself.button setNotOptionalBut];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>这是监听结果的改变！这样就方便了许多！</p><p>demo地址：<a href="https://github.com/zezeyu/iOS-demo/" target="_blank" rel="noopener">https://github.com/zezeyu/iOS-demo/</a></p><p>谢谢观看！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 在开发iOS的过程中，我们都会遇到许多有UITextField的页面，有的页面还不只一个。当我们提交填写的表单时，都会判断，是不是每个输入框都填写完成。效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/iOS/20180303003453784.gif&quot; alt=&quot;
      
    
    </summary>
    
    
  </entry>
  
</feed>
